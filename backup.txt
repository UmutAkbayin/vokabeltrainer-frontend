import React, { PropsWithChildren } from 'react';
import { render } from '@testing-library/react';
import type { RenderOptions } from '@testing-library/react';
import { configureStore } from '@reduxjs/toolkit';
import { Provider } from 'react-redux';

import type { AppStore, RootState } from '@/store';
// As a basic setup, import your same slice reducers
import amountReducer from '@/features/amount/amountSlice';
import answerReducer from '@/features/answer/answerSlice';
import countReducer from '@/features/count/countSlice';
import directionReducer from '@/features/direction/directionSlice';
import modeReducer from '@/features/mode/modeSlice';
import statusReducer from '@/features/status/statusSlice';
import vocabulariesReducer from '@/features/vocabularies/vocabulariesSlice';
import vocabularyReducer from '@/features/vocabulary/vocabularySlice';

// This type interface extends the default options for render from RTL, as well
// as allows the user to specify other things such as initialState, store.
interface ExtendedRenderOptions extends Omit<RenderOptions, 'queries'> {
  preloadedState?: Partial<RootState>
  store?: AppStore
}

export function renderWithProviders(
  ui: React.ReactElement,
  {
    preloadedState = {},
    // Automatically create a store instance if no store was passed in
    store = configureStore({
      reducer: {
        // @ts-ignore;
        amount: amountReducer,
        // @ts-ignore;
        mode: modeReducer,
        // @ts-ignore;
        status: statusReducer,
        // @ts-ignore;
        vocabularies: vocabulariesReducer,
        // @ts-ignore;
        vocabulary: vocabularyReducer,
        // @ts-ignore;
        direction: directionReducer,
        // @ts-ignore;
        answer: answerReducer,
        // @ts-ignore;
        count: countReducer,
      }, preloadedState }),
      ...renderOptions
    }: ExtendedRenderOptions = {}
) {
  function Wrapper({ children }: PropsWithChildren<{}>): JSX.Element {
    return <Provider store={store}>{children}</Provider>
  }

  // Return an object with the store and all of RTL's query functions
  return { store, ...render(ui, { wrapper: Wrapper, ...renderOptions }) }
}